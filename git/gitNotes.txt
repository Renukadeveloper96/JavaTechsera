=======================++++++++++++++++++++++==================
Git:
Version Control Software or Source Code Repository 
=======================++++++++++++++++++++++===================

->Multiple developers will work for project development
->Developers will be working from mutiple locations
->All developers code should be stored at one place(Code Integration should Happen)
->To integrate all the developers source code at one place we will use source code Repository software.

===================================++++++++++++++++++++++++++++++++++==================
Advantages with Source code repository software 
===================================++++++++++++++++++++++++++++++++++==================

1)All the developers can connect to repository server and can integrate the code.
2)Code Integration will become easy
3)Repository server will provide monitored access

who
when
why 
what
===================++++++++++++++++++++++++=======================
Repository Tools
===================++++++++++++++++++++++++=======================

SVN(Outdate)
Git Hub
BitBucket

===================++++++++++++++++++++++++=======================
Environment Setup to work with Github
===================++++++++++++++++++++++++=======================

1)Create Github account(
    www.github.com
)

2)Download and install Git Client Software(https://git-scm.com/downloads)

3)Once installation completed,right click on the mouse and verify git options display(If
 git options displaying our git client installation completed successfully)

==================+++++++++++++++++++++++++++++++++++++++++++======================
 Working with Github
 ==================+++++++++++++++++++++++++++++++++++++++++++======================

->Login into github account with your credentials
->Create Repository in github

Note :Repository is used to store project source code.Every Project will have one Repository

->When we create a repository,unique URL will be generated Name(i.e Repo URL)

-EX:
https://github.com/Renukadeveloper96/JavaTechsera.git

->All the developers will connect to repository using Repository URL

->we can create 2 type of Repositories in Github

1)Public Repositories
2)Private Repositories

->Public Repositories means everybody can access but we can choose who can modify our repository
->Private Repositories means we will choose who can access and who can modify

Repo URL:https://github.com/Renukadeveloper96/JavaTechsera.git

Working with Git Bash 
->Git Bash we can use as Git Client software to perform Git Operations

->Download and install git client (https://git-scm.com/downloads)

->Right click on Mouse and choose "Open Git Bash Here"

git help:It will display frequently used git commands

git help <cmd-name>:It will open documentation for given command

========Configure Your Email and Name in Git Bash With Commands==========
$git config --global user.email "Youremail@yourdomain.com"

$git config --global user.name "name"

Note:email and name we will configure only for first time

$ git init:To initialize our folder as git working tree folder

$git clone :To clone git repository to our machine from github.com

syntax:
$git clone <Project repo-url>

git status:It will display staged,un-staged and un-tracked files.

syntax:$ git status

Staged files:the files which are added for commit
un-staged files:the files which are modified but not added to commit

un-tracked files:Newly created files

Notes:To commit a files(S),we should add to staging area first

$git add .
It is used to add file (s) to staging area

git commit:it is used to commit staged files to git local repository

syntax:
$git commit -m 'reason-for commit'

$git push:To push changes from git local repository to git central repository
syntax:$ git push 

$git rm:To remove file(s)from repository

==================================================
Steps to push code to github central repository
==================================================

1) Create one public repository in git hub (take github repo url)

2) Clone github repository using 'git clone' command

		$ git clone 'repo-url'

3) Navigate to repository folder

4) Create one file in repository folder

		$ touch Demo.java

5) Check status of the file using 'git status' command

		$ git status (It will display as untracked file)

6) Add file to staging area using 'git add' command

		$ git add .

7) Commit file to git local repository

		$ git commit -m 'commit-msg'

8) Push file from git local repository to git central repository using 'git push' command

		$ git push

Note: If you are doing 'git push' for first time it will ask to enter your github account password.


------------------------------------------------------------------------------------------------------------------
Note: Git bash will ask our password only for first time. It will save our git credentials in Credential Manager in Windows machine.

-> Go to Credential Manager -> Windows Credentials -> Select Github -> We can modify and delete saved credentials from here
------------------------------------------------------------------------------------------------------------------

-> When we do git commit then it will geneate a commit-id with 40 characters length

-> From this commit-id it will display first 7 characters in git hub central repository

-> We can check commit history using 'git log' command

==================================================
Steps to commit Maven Project to Github Repository
==================================================

1) Create Maven Project

2) Create GitHub Repository

Note: After creating git repository, it will display set of commands to execute

3) Open gitbash from project folder and execute below commands

$ git init
$ git add .
$ git commit -m 'commit-msg'
$ git branch -M main
$ git remote add origin <repo-url>
$ git push -u origin master







